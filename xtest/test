#!/usr/bin/python3
import os, sys
import re
import subprocess
import difflib

TEST_SUITES = [
    {
        "name": "Scanner",
        "test_dir": "scanner/",
        "test_mode": 1,
        "enabled": False
    },
    {
        "name": "Symbol Table",
        "test_dir": "symbol_table/",
        "test_mode": 2,
        "enabled": False
    },
    {
        "name": "Lab 4 Provided Tests",
        "test_dir": "lab4_provided/",
        "test_mode": 3,
        "enabled": False
    },
    {
        "name": "Lab 4 Custom",
        "test_dir": "lab4_custom/",
        "test_mode": 3,
        "enabled": False
    },
    {
        "name": "Lab 5 Provided",
        "test_dir": "lab5_provided/",
        "test_mode": 4,
        "enabled": False
    },
    {
        "name": "Lab 6 Provided",
        "test_dir": "lab6_provided/",
        "test_mode": 4,
        "enabled": False
    },
    {
        "name": "Lab 7",
        "test_dir": "lab7/",
        "test_mode": 5,
        "enabled": True
    },
]

TEST_DIR = "xtest/tests/"
TEST_PROG = "./lang_test"
OUT_TEST_FILE = "xtest/out"

RE_TEST = re.compile(".+\.lang$")

def get_tests(test_dir):
    files = os.listdir(test_dir)
    tests = []
    for file in files:
        if RE_TEST.match(file):
            tests.append(file)
    return tests

def run_test_suite(test_suite):
    test_dir = TEST_DIR + test_suite["test_dir"]
    test_mode = test_suite["test_mode"]

    tests = get_tests(test_dir)
    for test in tests:
        solution_name = test + ".correct"
        test_file = test_dir + test
        solution_file = test_dir + solution_name

        expected_output = ""
        test_output = ""
        expected_lines = []
        test_lines = []

        print("Running test: " + test + " | ", end='')

        try:
            output_file = open(solution_file, mode='r')
            expected_output = output_file.read()
            output_file.seek(0)
            expected_lines = output_file.readlines()
            output_file.close()
        except IOError:
            print("Could not open solution file: " + solution_name)
            continue

        if test_mode == 5:
            subprocess.call([TEST_PROG, str(test_mode), test_file, "langout"])
            subprocess.call(["stackl", "langout", ">", OUT_TEST_FILE])

            global OUT_TEST_FILE
            OUT_TEST_FILE += ".sl"
        else:
            global OUT_TEST_FILE
            OUT_TEST_FILE += ".txt"
            subprocess.call([TEST_PROG, str(test_mode), test_file, OUT_TEST_FILE])

        if test_mode == 2 or test_mode == 3:
            subprocess.call(["xmllint", "--format", OUT_TEST_FILE, "-o", OUT_TEST_FILE])

        if test_mode == 4:
            output_file = open(OUT_TEST_FILE, mode='r')
            ch = output_file.read(1)
            output_file.close()
            if ch == '<':
                subprocess.call(["xmllint", "--format", OUT_TEST_FILE, "-o", OUT_TEST_FILE])

        output_file = open(OUT_TEST_FILE, mode='r')
        test_output = output_file.read()
        output_file.seek(0)
        test_lines = output_file.readlines()
        output_file.close()

        if test_output == expected_output:
            print("[PASSED]")
        else:
            print("[FAILED]")
            diff = difflib.unified_diff(expected_lines, test_lines)
            sys.stdout.writelines(diff)

        os.remove(OUT_TEST_FILE)

    print("")

def main():
    for test_suite in TEST_SUITES:
        if test_suite["enabled"]:
            print("Running Test Suite: " + test_suite["name"])
            run_test_suite(test_suite)

main()
